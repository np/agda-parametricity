{-# OPTIONS --with-K #-}
open import Level hiding (zero; suc)
open import Data.Unit renaming (‚ä§ to ùüô; tt to 0‚ÇÅ)
open import Data.Bool
  using    (not)
  renaming (Bool to ùüö; false to 0‚ÇÇ; true to 1‚ÇÇ)
open import Data.String.Base using (String)
open import Data.Float       using (Float)
open import Function
open import Data.Fin using (Fin; zero; suc)
open import Data.Nat hiding (_‚âü_)
open import Data.List using (List; []; _‚à∑_; drop)
open import Relation.Binary.PropositionalEquality
  using (_‚â°_; refl) renaming (_‚âó_ to _~_)

open import Function.Param.Unary
open import Function.Param.Binary
open import Type.Param.Unary
open import Type.Param.Binary
open import Data.Two.Param.Binary
open import Data.Nat.Param.Binary
open import Reflection.NP
open import Reflection.Param
open import Reflection.Param.Env

module Reflection.Param.Tests where

--import Reflection.Printer as Pr
--open Pr using (var;con;def;lam;pi;sort;unknown;showTerm;showType;showDef;showFunDef;showClauses)

-- Local "imports" to avoid depending on nplib
private
  postulate
    opaque : ‚àÄ {a b} {A : Set a} {B : Set b} ‚Üí A ‚Üí B ‚Üí B
    -- opaque-rule : ‚àÄ {x} y ‚Üí opaque x y ‚â° y

  ‚òÖ‚ÇÄ = Set‚ÇÄ
  ‚òÖ‚ÇÅ = Set‚ÇÅ

infixr 1 _[‚ÇÄ‚Üí‚ÇÄ]_
_[‚ÇÄ‚Üí‚ÇÄ]_ : ‚àÄ {A : Set‚ÇÄ} (A‚Çö : A ‚Üí Set‚ÇÄ)
            {B : Set‚ÇÄ} (B‚Çö : B ‚Üí Set‚ÇÄ)
            (f : A ‚Üí B) ‚Üí Set‚ÇÄ
_[‚ÇÄ‚Üí‚ÇÄ]_ {A} A‚Çö {B} B‚Çö f = ‚àÄ {a} (a‚Çö : A‚Çö a) ‚Üí B‚Çö (f a)

infixr 1 _[‚ÇÄ‚Üí‚ÇÅ]_
_[‚ÇÄ‚Üí‚ÇÅ]_ : ‚àÄ {A : Set‚ÇÄ} (A‚Çö : A ‚Üí Set‚ÇÄ)
            {B : Set‚ÇÅ} (B‚Çö : B ‚Üí Set‚ÇÅ)
            (f : A ‚Üí B) ‚Üí Set‚ÇÅ
_[‚ÇÄ‚Üí‚ÇÅ]_ {A} A‚Çö {B} B‚Çö f = ‚àÄ {a} (a‚Çö : A‚Çö a) ‚Üí B‚Çö (f a)

infixr 1 _[‚ÇÅ‚Üí‚ÇÅ]_
_[‚ÇÅ‚Üí‚ÇÅ]_ : ‚àÄ {A : Set‚ÇÅ} (A‚Çö : A ‚Üí Set‚ÇÅ)
            {B : Set‚ÇÅ} (B‚Çö : B ‚Üí Set‚ÇÅ)
            (f : A ‚Üí B) ‚Üí Set‚ÇÅ
_[‚ÇÅ‚Üí‚ÇÅ]_ {A} A‚Çö {B} B‚Çö f = ‚àÄ {a} (a‚Çö : A‚Çö a) ‚Üí B‚Çö (f a)

infixr 1 _[‚ÇÅ‚Üí‚ÇÇ]_
_[‚ÇÅ‚Üí‚ÇÇ]_ : ‚àÄ {A : Set‚ÇÅ} (A‚Çö : A ‚Üí Set‚ÇÅ)
            {B : Set‚ÇÇ} (B‚Çö : B ‚Üí Set‚ÇÇ)
            (f : A ‚Üí B) ‚Üí Set‚ÇÇ
_[‚ÇÅ‚Üí‚ÇÇ]_ {A} A‚Çö {B} B‚Çö f = ‚àÄ {a} (a‚Çö : A‚Çö a) ‚Üí B‚Çö (f a)

[[Set‚ÇÄ]] : ([Set‚ÇÄ] [‚ÇÅ‚Üí‚ÇÇ] [Set‚ÇÅ]) [Set‚ÇÄ]
[[Set‚ÇÄ]] A = A [‚ÇÄ‚Üí‚ÇÅ] [Set‚ÇÄ]

{-
EqEnv = {!!}
EqRes = {!!}

eqTerm : EqEnv ‚Üí Term ‚Üí Term ‚Üí EqRes
eqTerm Œì (var x args) (var x‚ÇÅ args‚ÇÅ) = {!!}
eqTerm Œì (def f‚ÇÄ args‚ÇÄ) (def f‚ÇÅ args‚ÇÅ) = {!!}
eqTerm Œì (con c‚ÇÄ args‚ÇÄ) (con c‚ÇÅ args‚ÇÅ) = {!!}
eqTerm Œì (lam v t) (lam v' t') = {!!}
eqTerm Œì (pi t‚ÇÅ t‚ÇÇ) (pi u‚ÇÅ u‚ÇÇ) = {!!}
eqTerm Œì (sort s‚ÇÄ) (sort s‚ÇÅ) = {!!}
eqTerm Œì (lit l‚ÇÄ) (lit l‚ÇÅ) = {!!}
eqTerm Œì unknown unknown = {!!}
eqTerm Œì (def f args) u = {!!}
--eqTerm Œì (pat-lam cs args) u = {!!}
eqTerm _ _ = ?
-}

{-
import Reflection.Simple as Si
open Si using (var;con;def;lam;pi;sort;unknown;simple;showTerm)
-}

_‚â°-no-hints_ : Term ‚Üí Term ‚Üí Set
t ‚â°-no-hints u = noHintsTerm t ‚â° noHintsTerm u

_‚â°-def-no-hints_ : Definition ‚Üí Definition ‚Üí Set
t ‚â°-def-no-hints u = noHintsDefinition t ‚â° noHintsDefinition u

macro
  --test-param : ‚àÄ {a} {A : Set a} (pred : A ‚Üí Set) ‚Üí Term ‚Üí Term ‚Üí TC ùüô
  --test-param pred my hole = {!unify hole (def (pred my)!}

  unquoteTerm : TC Term ‚Üí Term ‚Üí TC ùüô
  unquoteTerm m hole = m >>= unify hole

  unquoteTermDbg : TC Term ‚Üí Term ‚Üí TC ùüô
  unquoteTermDbg m hole = m >>= Œª t ‚Üí typeError (termErr t ‚à∑ [])

p[Set‚ÇÄ]-type : TC Term
p[Set‚ÇÄ]-type = param-type-by-name (Œµ 1) (quote [Set‚ÇÄ])
p[Set‚ÇÄ] = param-clauses-by-name (Œµ 1) (quote [Set‚ÇÄ])
--q[[Set‚ÇÄ]] = {!definition (quote [[Set‚ÇÄ]]) -- quoteTerm [[Set‚ÇÄ]]!}

test-type-p[Set‚ÇÄ] : ([Set‚ÇÄ] [‚ÇÅ‚Üí‚ÇÇ] [Set‚ÇÅ]) [Set‚ÇÄ] ‚â° unquoteTerm p[Set‚ÇÄ]-type
test-type-p[Set‚ÇÄ] = refl


--test-term-p[Set‚ÇÄ] : quoteTerm [[Set‚ÇÄ]] ‚â°-no-hints {!(mapTC Get-term.from-clauses p[Set‚ÇÄ])!}
--test-term-p[Set‚ÇÄ] = refl

--u-p[Set‚ÇÄ] : ([Set‚ÇÄ] [‚ÇÅ‚Üí‚ÇÇ] [Set‚ÇÅ]) [Set‚ÇÄ]
--unquoteDef u-p[Set‚ÇÄ] = param-def-by-name (Œµ 1) (quote [Set‚ÇÄ]) u-p[Set‚ÇÄ]

False : Set‚ÇÅ
False = (A : Set) ‚Üí A

param1-False-type = param-type-by-name (Œµ 1) (quote False)
param1-False-term = param-term-by-name (Œµ 1) (quote False)

param1-False-type-check : [Set‚ÇÅ] False ‚â° unquoteTerm param1-False-type
param1-False-type-check = refl

[False] : unquoteTerm param1-False-type
[False] = unquoteTerm param1-False-term

[Level] : [Set‚ÇÄ] Level
[Level] _ = ùüô

[String] : [Set‚ÇÄ] String
[String] _ = ùüô

[Float] : [Set‚ÇÄ] Float
[Float] _ = ùüô

-- Levels are parametric, hence the relation is total
‚ü¶Level‚üß : ‚ü¶Set‚ÇÄ‚üß Level Level
‚ü¶Level‚üß _ _ = ùüô

‚ü¶String‚üß : ‚ü¶Set‚ÇÄ‚üß String String
‚ü¶String‚üß = _‚â°_

‚ü¶Float‚üß : ‚ü¶Set‚ÇÄ‚üß Float Float
‚ü¶Float‚üß = _‚â°_

data [ùüö] : [Set‚ÇÄ] ùüö where
  [0‚ÇÇ] : [ùüö] 0‚ÇÇ
  [1‚ÇÇ] : [ùüö] 1‚ÇÇ

data [‚Ñï] : [Set‚ÇÄ] ‚Ñï where
  [zero] : [‚Ñï] zero
  [suc]  : ([‚Ñï] [‚Üí] [‚Ñï]) suc

[pred] : ([‚Ñï] [‚Üí] [‚Ñï]) pred
[pred] [zero]     = [zero]
[pred] ([suc] x‚Çö) = x‚Çö

defDefEnv1 : Name ‚Üí Name
defDefEnv1 (quote ùüö)      = quote [ùüö]
defDefEnv1 (quote ‚Ñï)      = quote [‚Ñï]
defDefEnv1 (quote String) = quote [String]
defDefEnv1 (quote Float)  = quote [Float]
defDefEnv1 (quote ‚òÖ‚ÇÄ)     = quote [Set‚ÇÄ]
defDefEnv1 (quote ‚òÖ‚ÇÅ)     = quote [Set‚ÇÅ]
defDefEnv1 (quote False)  = quote [False]
defDefEnv1 (quote Level)  = quote [Level]
defDefEnv1 n              = opaque "defDefEnv1" n

defConEnv1 : Name ‚Üí Name
defConEnv1 (quote 0‚ÇÇ)         = quote [0‚ÇÇ]
defConEnv1 (quote 1‚ÇÇ)         = quote [1‚ÇÇ]
defConEnv1 (quote ‚Ñï.zero)     = quote [zero]
defConEnv1 (quote ‚Ñï.suc)      = quote [suc]
defConEnv1 (quote Level.zero) = quote 0‚ÇÅ
defConEnv1 (quote Level.suc)  = quote 0‚ÇÅ
defConEnv1 n                  = opaque "defConEnv1" n

defDefEnv2 : Name ‚Üí Name
defDefEnv2 (quote ùüö)      = quote ‚ü¶ùüö‚üß
defDefEnv2 (quote ‚Ñï)      = quote ‚ü¶‚Ñï‚üß
defDefEnv2 (quote ‚òÖ‚ÇÄ)     = quote ‚ü¶Set‚ÇÄ‚üß
defDefEnv2 (quote ‚òÖ‚ÇÅ)     = quote ‚ü¶Set‚ÇÅ‚üß
defDefEnv2 (quote String) = quote ‚ü¶String‚üß
defDefEnv2 (quote Float)  = quote ‚ü¶Float‚üß
defDefEnv2 (quote Level)  = quote ‚ü¶Level‚üß
defDefEnv2 n              = opaque "defDefEnv" n

defConEnv2 : Name ‚Üí Name
defConEnv2 (quote 0‚ÇÇ)         = quote ‚ü¶0‚ÇÇ‚üß
defConEnv2 (quote 1‚ÇÇ)         = quote ‚ü¶1‚ÇÇ‚üß
defConEnv2 (quote ‚Ñï.zero)     = quote ‚ü¶‚Ñï‚üß.‚ü¶zero‚üß
defConEnv2 (quote ‚Ñï.suc)      = quote ‚ü¶‚Ñï‚üß.‚ü¶suc‚üß
defConEnv2 (quote Level.zero) = quote 0‚ÇÅ
defConEnv2 (quote Level.suc)  = quote 0‚ÇÅ
defConEnv2 n                  = opaque "defConEnv2" n

defEnv0 : Env' 0
defEnv0 = record (Œµ 0)
                 { pConT = con
                 ; pConP = con
                 ; pDef  = id }

defEnv1 : Env' 1
defEnv1 = record (Œµ 1)
  { pConP = con ‚àò‚Ä≤ defConEnv1
  ; pConT = con ‚àò‚Ä≤ defConEnv1
  ; pDef = defDefEnv1 }

defEnv2 : Env' 2
defEnv2 = record (Œµ 2)
  { pConP = con ‚àò‚Ä≤ defConEnv2
  ; pConT = con ‚àò‚Ä≤ defConEnv2
  ; pDef = defDefEnv2 }

param1-[False]-type = param-type-by-name defEnv1 (quote [False])
param1-[False]-term = param-term-by-name defEnv1 (quote [False])

{-
module Const where
  postulate
    A  : Set‚ÇÄ
    A·µ£ : A ‚Üí A ‚Üí Set‚ÇÄ
  data Wrapper : Set where
    wrap : A ‚Üí Wrapper

  idWrapper : Wrapper ‚Üí Wrapper
  idWrapper (wrap x) = wrap x

  data ‚ü¶Wrapper‚üß : Wrapper ‚Üí Wrapper ‚Üí Set‚ÇÄ where
    ‚ü¶wrap‚üß : (A·µ£ ‚ü¶‚Üí‚üß ‚ü¶Wrapper‚üß) wrap wrap

  wrapperEnv = record (Œµ 2)
   { pDef = [ quote Wrapper       ‚âî quote ‚ü¶Wrapper‚üß  ] id
   ; pConP = [ quote Wrapper.wrap ‚âî con (quote ‚ü¶Wrapper‚üß.‚ü¶wrap‚üß) ] con
   ; pConT = [ quote Wrapper.wrap ‚âî con (quote ‚ü¶Wrapper‚üß.‚ü¶wrap‚üß) ] con
   }

  unquoteDecl ‚ü¶idWrapper‚üß = param-rec-def-by-name wrapperEnv (quote idWrapper) ‚ü¶idWrapper‚üß
-}

data Wrapper (A : Set‚ÇÄ) : Set‚ÇÄ where
  wrap : A ‚Üí Wrapper A

unwrap : ‚àÄ {A} ‚Üí Wrapper A ‚Üí A
unwrap (wrap a) = a

idWrapper : ‚àÄ {A} ‚Üí Wrapper A ‚Üí Wrapper A
idWrapper (wrap x) = wrap x

module Param where

  data [Wrapper] {A : Set} (A‚Çö : A ‚Üí Set‚ÇÄ)
     : Wrapper A ‚Üí Set‚ÇÄ where
    [wrap] : (A‚Çö [‚Üí] [Wrapper] A‚Çö) wrap

  {-
  [Wrapper]-env = record (Œµ 1)
    { pDef = [ quote Wrapper ‚âî quote [Wrapper] ] id
    ; pConP = [ quote wrap ‚âî con (quote [wrap])  ] con
    ; pConT = [ quote wrap ‚âî conSkip' (quote [wrap]) ] con
    }

  unquoteDecl [idWrapper] =
    param-rec-def-by-name [Wrapper]-env (quote idWrapper) [idWrapper]
  -}
  {-
  [idWrapper] = {!  param-rec-def-by-name [Wrapper]-env (quote idWrapper) [idWrapper]!}
  -- [idWrapper] = {!  param-rec-def-by-name [Wrapper]-env (quote idWrapper) [idWrapper]!}
  -}

{-
-- The generated type bigger since it is a familly for no reason.
data ‚ü¶Wrapper‚üß : (‚ü¶Set‚ÇÄ‚üß ‚ü¶‚Üí‚üß ‚ü¶Set‚ÇÅ‚üß) Wrapper Wrapper

private
  ‚ü¶Wrapper‚üß-ctor = param-ctor-by-name (extDefEnv [ quote Wrapper ‚âî quote ‚ü¶Wrapper‚üß ] (Œµ 2))

data ‚ü¶Wrapper‚üß where
  ‚ü¶wrap‚üß : unquote (‚ü¶Wrapper‚üß-ctor (quote Wrapper.wrap))
-}

{-
data ‚ü¶Wrapper‚üß {A‚ÇÄ A‚ÇÅ : Set} (A·µ£ : A‚ÇÄ ‚Üí A‚ÇÅ ‚Üí Set‚ÇÄ)
   : Wrapper A‚ÇÄ ‚Üí Wrapper A‚ÇÅ ‚Üí Set‚ÇÄ where
  ‚ü¶wrap‚üß : (A·µ£ ‚ü¶‚Üí‚üß ‚ü¶Wrapper‚üß A·µ£) wrap wrap

‚ü¶Wrapper‚üß-env = record (Œµ 2)
  { pDef = [ quote Wrapper ‚âî quote ‚ü¶Wrapper‚üß ] id
  ; pConP = [ quote wrap ‚âî con (quote ‚ü¶wrap‚üß)  ] con
  ; pConT = [ quote wrap ‚âî conSkip' 3 (quote ‚ü¶wrap‚üß) ] con
  }

‚ü¶idWrapper‚üß1 : (‚àÄ‚ü® A ‚à∂ ‚ü¶Set‚ÇÄ‚üß ‚ü©‚ü¶‚Üí‚üß ‚ü¶Wrapper‚üß A ‚ü¶‚Üí‚üß ‚ü¶Wrapper‚üß A) idWrapper idWrapper
‚ü¶idWrapper‚üß1 {x0} {x1} (x2) {._} {._} (‚ü¶wrap‚üß {x3} {x4} x5)
  = ‚ü¶wrap‚üß {_} {_} {_} {x3} {x4} x5

‚ü¶idWrapper‚üß-clauses =
  clause
  (arg (arg-info hidden  relevant) (var "A0") ‚à∑
   arg (arg-info hidden  relevant) (var "A1") ‚à∑
   arg (arg-info visible relevant) (var "Ar") ‚à∑
   arg (arg-info hidden  relevant) dot ‚à∑
   arg (arg-info hidden  relevant) dot ‚à∑
   arg (arg-info visible relevant)
   (con (quote ‚ü¶wrap‚üß)
    (arg (arg-info hidden  relevant) (var "x0") ‚à∑
     arg (arg-info hidden  relevant) (var "x1") ‚à∑
     arg (arg-info visible relevant) (var "xr") ‚à∑ []))
   ‚à∑ [])
  (con (quote ‚ü¶wrap‚üß)
   (arg (arg-info hidden relevant) unknown ‚à∑
    arg (arg-info hidden relevant) unknown ‚à∑
    arg (arg-info hidden relevant) unknown ‚à∑
    arg (arg-info hidden relevant)  (var 2 []) ‚à∑
    arg (arg-info hidden relevant)  (var 1 []) ‚à∑
    arg (arg-info visible relevant) (var 0 []) ‚à∑ []))
  ‚à∑ []

‚ü¶idWrapper‚üß2 : (‚àÄ‚ü® A ‚à∂ ‚ü¶Set‚ÇÄ‚üß ‚ü©‚ü¶‚Üí‚üß ‚ü¶Wrapper‚üß A ‚ü¶‚Üí‚üß ‚ü¶Wrapper‚üß A) idWrapper idWrapper
unquoteDef ‚ü¶idWrapper‚üß2 = ‚ü¶idWrapper‚üß-clauses

unquoteDecl ‚ü¶idWrapper‚üß =
  param-rec-def-by-name ‚ü¶Wrapper‚üß-env (quote idWrapper) ‚ü¶idWrapper‚üß
-}

data Bot (A : Set‚ÇÄ) : Set‚ÇÄ where
  bot : Bot A ‚Üí Bot A

gobot : ‚àÄ {A} ‚Üí Bot A ‚Üí A
gobot (bot x) = gobot x

data [Bot] {A : Set} (A‚Çö : A ‚Üí Set‚ÇÄ)
   : Bot A ‚Üí Set‚ÇÄ where
  [bot] : ([Bot] A‚Çö [‚Üí] [Bot] A‚Çö) bot

[Bot]-env = record (Œµ 1)
  { pDef = [ quote Bot ‚âî quote [Bot] ] id
  ; pConP = [ quote bot ‚âî con (quote [bot])  ] con
  ; pConT = [ quote bot ‚âî conSkip' 2 (quote [bot]) ] con
  }

[gobot]' : (‚àÄ‚ü® A ‚à∂ [Set‚ÇÄ] ‚ü©[‚Üí] [Bot] A [‚Üí] A) gobot
[gobot]' {x0} (x1) {._} ([bot] {x2} x3)
  = [gobot]' {x0} x1 {x2} x3

-- [gobot]' = showClauses "[gobot]'" (param-rec-clauses-by-name [Bot]-env (quote gobot) (quote [gobot]'))

{-
[gobot]2 : (‚àÄ‚ü® A ‚à∂ [Set‚ÇÄ] ‚ü©[‚Üí] [Bot] A [‚Üí] A) gobot

[gobot]2-clauses =
  clause
    (arg (arg-info hidden  relevant) (var "A·µ¢0") ‚à∑
     arg (arg-info visible relevant) (var "A·µ£") ‚à∑
     arg (arg-info hidden  relevant) dot ‚à∑
     arg (arg-info visible relevant)
     (con (quote [bot])
      (arg (arg-info hidden  relevant) (var "x·µ¢0") ‚à∑
       arg (arg-info visible relevant) (var "x·µ£") ‚à∑ []))
     ‚à∑ [])
    (def (quote [gobot]2)
     (arg (arg-info hidden  relevant) (var 3 []) ‚à∑
      arg (arg-info visible relevant) (var 2 []) ‚à∑
      arg (arg-info hidden  relevant) (var 1 []) ‚à∑
      arg (arg-info visible relevant) (var 0 []) ‚à∑ []))
    ‚à∑ []

unquoteDef [gobot]2 = [gobot]2-clauses

unquoteDecl [gobot] =
  param-rec-def-by-name [Bot]-env (quote gobot) [gobot]

data ‚ü¶Bot‚üß {A‚ÇÄ A‚ÇÅ : Set} (A·µ£ : A‚ÇÄ ‚Üí A‚ÇÅ ‚Üí Set‚ÇÄ)
   : Bot A‚ÇÄ ‚Üí Bot A‚ÇÅ ‚Üí Set‚ÇÄ where
  ‚ü¶bot‚üß : (‚ü¶Bot‚üß A·µ£ ‚ü¶‚Üí‚üß ‚ü¶Bot‚üß A·µ£) bot bot

‚ü¶Bot‚üß-env = record (Œµ 2)
  { pDef = [ quote Bot ‚âî quote ‚ü¶Bot‚üß ] id
  ; pConP = [ quote bot ‚âî con (quote ‚ü¶bot‚üß)  ] con
  ; pConT = [ quote bot ‚âî conSkip' 3 (quote ‚ü¶bot‚üß) ] con
  }

‚ü¶gobot‚üß1 : (‚àÄ‚ü® A ‚à∂ ‚ü¶Set‚ÇÄ‚üß ‚ü©‚ü¶‚Üí‚üß ‚ü¶Bot‚üß A ‚ü¶‚Üí‚üß A) gobot gobot
‚ü¶gobot‚üß1 {x0} {x1} x2 {._} {._} (‚ü¶bot‚üß {x3} {x4} x5)
  = ‚ü¶gobot‚üß1 {x0} {x1} x2 {x3} {x4} x5

unquoteDecl ‚ü¶gobot‚üß =
  param-rec-def-by-name ‚ü¶Bot‚üß-env (quote gobot) ‚ü¶gobot‚üß
-}
id‚ÇÄ : {A : Set‚ÇÄ} ‚Üí A ‚Üí A
id‚ÇÄ x = x

‚ü¶id‚ÇÄ‚üß : (‚àÄ‚ü® A ‚à∂ ‚ü¶Set‚ÇÄ‚üß ‚ü©‚ü¶‚Üí‚üß A ‚ü¶‚Üí‚üß A) id‚ÇÄ id‚ÇÄ
‚ü¶id‚ÇÄ‚üß {x‚ÇÅ} {x‚ÇÇ} x·µ£ {x‚ÇÉ} {x‚ÇÑ} x·µ£‚ÇÅ = x·µ£‚ÇÅ

data List‚ÇÄ (A : Set) : Set where
  []  : List‚ÇÄ A
  _‚à∑_ : A ‚Üí List‚ÇÄ A ‚Üí List‚ÇÄ A

map‚ÇÄ : ‚àÄ {A B} (f : A ‚Üí B) (xs : List‚ÇÄ A) ‚Üí List‚ÇÄ B
map‚ÇÄ f []       = []
map‚ÇÄ f (x ‚à∑ xs) = f x ‚à∑ map‚ÇÄ f xs

idList‚ÇÄ : ‚àÄ {A} ‚Üí List‚ÇÄ A ‚Üí List‚ÇÄ A
-- idList‚ÇÄ : List‚ÇÄ ‚Ñï ‚Üí List‚ÇÄ ‚Ñï
idList‚ÇÄ []       = []
idList‚ÇÄ {A} (x ‚à∑ xs) = idList‚ÇÄ {A} xs

data ‚ü¶List‚ÇÄ‚üß {A‚ÇÄ A‚ÇÅ : Set} (A·µ£ : A‚ÇÄ ‚Üí A‚ÇÅ ‚Üí Set‚ÇÄ) : List‚ÇÄ A‚ÇÄ ‚Üí List‚ÇÄ A‚ÇÅ ‚Üí Set‚ÇÄ where
  ‚ü¶[]‚üß  : ‚ü¶List‚ÇÄ‚üß A·µ£ [] []
  _‚ü¶‚à∑‚üß_ : (A·µ£ ‚ü¶‚Üí‚üß ‚ü¶List‚ÇÄ‚üß A·µ£ ‚ü¶‚Üí‚üß ‚ü¶List‚ÇÄ‚üß A·µ£) _‚à∑_ _‚à∑_

dropAllArgs : (Args Term ‚Üí Term) ‚Üí Args Term ‚Üí Term
dropAllArgs f _ = f []

dropArgs : ‚Ñï ‚Üí (Args Term ‚Üí Term) ‚Üí Args Term ‚Üí Term
dropArgs n f args = f (drop n args)

con‚ü¶List‚ÇÄ‚üß = dropArgs 3 ‚àò conSkip' 3

‚ü¶List‚ÇÄ‚üß-env = record (Œµ 2)
  { pDef = [ quote List‚ÇÄ ‚âî quote ‚ü¶List‚ÇÄ‚üß ] id
  ; pConP = [ quote List‚ÇÄ.[]  ‚âî con (quote ‚ü¶List‚ÇÄ‚üß.‚ü¶[]‚üß)  ]
           ([ quote List‚ÇÄ._‚à∑_ ‚âî con (quote ‚ü¶List‚ÇÄ‚üß._‚ü¶‚à∑‚üß_) ]
            con)
  ; pConT = [ quote List‚ÇÄ.[]  ‚âî con‚ü¶List‚ÇÄ‚üß (quote ‚ü¶List‚ÇÄ‚üß.‚ü¶[]‚üß)  ]
           ([ quote List‚ÇÄ._‚à∑_ ‚âî con‚ü¶List‚ÇÄ‚üß (quote ‚ü¶List‚ÇÄ‚üß._‚ü¶‚à∑‚üß_) ]
            con)
  }

‚ü¶idList‚ÇÄ‚üß' : (‚àÄ‚ü® A ‚à∂ ‚ü¶Set‚ÇÄ‚üß ‚ü©‚ü¶‚Üí‚üß ‚ü¶List‚ÇÄ‚üß A ‚ü¶‚Üí‚üß ‚ü¶List‚ÇÄ‚üß A) idList‚ÇÄ idList‚ÇÄ
‚ü¶idList‚ÇÄ‚üß' {x0} {x1} xr {._} {._} ‚ü¶[]‚üß = ‚ü¶[]‚üß
‚ü¶idList‚ÇÄ‚üß' {x0} {x1} xr {._} {._} (_‚ü¶‚à∑‚üß_ {x11} {x12} x13 {x14} {x15} x16)  =
  ‚ü¶idList‚ÇÄ‚üß' {x0} {x1} xr {x14} {x15} x16

‚ü¶idList‚ÇÄ‚üß : unquoteTerm (param-type-by-name ‚ü¶List‚ÇÄ‚üß-env (quote idList‚ÇÄ))
-- ‚ü¶idList‚ÇÄ‚üß : (‚àÄ‚ü® A ‚à∂ ‚ü¶Set‚ÇÄ‚üß ‚ü©‚ü¶‚Üí‚üß ‚ü¶List‚ÇÄ‚üß A ‚ü¶‚Üí‚üß ‚ü¶List‚ÇÄ‚üß A) idList‚ÇÄ idList‚ÇÄ
unquoteDef ‚ü¶idList‚ÇÄ‚üß =
  param-def-by-name ‚ü¶List‚ÇÄ‚üß-env (quote idList‚ÇÄ) ‚ü¶idList‚ÇÄ‚üß
{-  >>= Œª t ‚Üí getDefinition (quote ‚ü¶idList‚ÇÄ‚üß')
  >>= Œª d ‚Üí quoteTC d
  >>= Œª qd ‚Üí withNormalisation 1‚ÇÇ (quoteTC t)
  >>= Œª qt ‚Üí typeError (termErr qd ‚à∑ termErr qt ‚à∑ []) >>-}

unquoteDecl ‚ü¶idList‚ÇÄ‚üß''' =
  param-decl-by-name ‚ü¶List‚ÇÄ‚üß-env (quote idList‚ÇÄ) ‚ü¶idList‚ÇÄ‚üß'''

‚ü¶map‚ÇÄ‚üß' : {x0 : Set0} ‚Üí {x1 : Set0} ‚Üí (x2 : (x2 : x0) ‚Üí (x3 : x1) ‚Üí Set0) ‚Üí {x3 : Set0} ‚Üí {x4 : Set0} ‚Üí (x5 : (x5 : x3) ‚Üí (x6 : x4) ‚Üí Set0) ‚Üí {x6 : (x6 : x0) ‚Üí x3} ‚Üí {x7 : (x7 : x1) ‚Üí x4} ‚Üí (x8 : {x8 : x0} ‚Üí {x9 : x1} ‚Üí (x10 : x2 (x8) (x9)) ‚Üí x5 (x6 (x8)) (x7 (x9))) ‚Üí {x9 : List‚ÇÄ (x0)} ‚Üí {x10 : List‚ÇÄ (x1)} ‚Üí (x11 : ‚ü¶List‚ÇÄ‚üß {x0} {x1} (x2) (x9) (x10)) ‚Üí ‚ü¶List‚ÇÄ‚üß {x3} {x4} (x5) (map‚ÇÄ {x0} {x3} (x6) (x9)) (map‚ÇÄ {x1} {x4} (x7) (x10))
‚ü¶map‚ÇÄ‚üß' {x0} {x1} (x2) {x3} {x4} (x5) {x6} {x7} (x8) {._} {._} (‚ü¶[]‚üß )  = ‚ü¶[]‚üß
‚ü¶map‚ÇÄ‚üß' {x0} {x1} (x2) {x3} {x4} (x5) {x6} {x7} (x8) {._} {._} (_‚ü¶‚à∑‚üß_ {x11} {x12} (x13) {x14} {x15} (x16) )  = _‚ü¶‚à∑‚üß_ {x3} {x4} {x5} {x6 x11} {x7 x12}
               (x8 {x11} {x12} (x13))
               {map‚ÇÄ {x0} {x3} (x6) (x14)} {map‚ÇÄ {x1} {x4} (x7) (x15)}
               (‚ü¶map‚ÇÄ‚üß' {x0} {x1} (x2) {x3} {x4} (x5) {x6} {x7} (x8) {x14} {x15} (x16))

unquoteDecl ‚ü¶map‚ÇÄ‚üß
 = param-decl-by-name ‚ü¶List‚ÇÄ‚üß-env (quote map‚ÇÄ) ‚ü¶map‚ÇÄ‚üß

{-
map-nat : ‚àÄ (f : ‚àÄ {X} ‚Üí List‚ÇÄ X ‚Üí List‚ÇÄ X)
            {A B : Set} (g : A ‚Üí B)
          ‚Üí f ‚àò map‚ÇÄ g ~ map‚ÇÄ g ‚àò f
map-nat f g x = {!‚ü¶map‚ÇÄ‚üß _‚â°_ _‚â°_ {g}!}

  -- The generated type is bigger since it is a familly for no reason.
  data ‚ü¶List‚ÇÄ‚üß : (‚ü¶Set‚ÇÄ‚üß ‚ü¶‚Üí‚üß ‚ü¶Set‚ÇÅ‚üß) List‚ÇÄ List‚ÇÄ

  private
    ‚ü¶List‚ÇÄ‚üß-ctor = param-ctor-by-name (extDefEnv [ quote List‚ÇÄ ‚âî quote ‚ü¶List‚ÇÄ‚üß ] (Œµ 2))

  data ‚ü¶List‚ÇÄ‚üß where
    ‚ü¶[]‚üß  : unquote (‚ü¶List‚ÇÄ‚üß-ctor (quote List‚ÇÄ.[]))
    _‚ü¶‚à∑‚üß_ : unquote (‚ü¶List‚ÇÄ‚üß-ctor (quote List‚ÇÄ._‚à∑_))

  ‚ü¶List‚ÇÄ‚üß-env = extConEnv ([ quote List‚ÇÄ.[]  ‚âî quote ‚ü¶List‚ÇÄ‚üß.‚ü¶[]‚üß  ] ‚àò
                        [ quote List‚ÇÄ._‚à∑_ ‚âî quote ‚ü¶List‚ÇÄ‚üß._‚ü¶‚à∑‚üß_ ])
             (extDefEnv [ quote List‚ÇÄ ‚âî quote ‚ü¶List‚ÇÄ‚üß ] (Œµ 2))
-}

data Maybe' (A : Set) : Set‚ÇÅ where
  nothing : Maybe' A
  just    : A ‚Üí Maybe' A

{-
-- Set‚ÇÅ is here because ‚ü¶List‚ÇÄ‚üß is not using parameters, hence gets bigger.
-- This only happens without-K given the new rules for data types.
data List‚ÇÄ : (A : Set) ‚Üí Set‚ÇÅ where
  []  : ‚àÄ {A} ‚Üí List‚ÇÄ A
  _‚à∑_ : ‚àÄ {A} ‚Üí A ‚Üí List‚ÇÄ A ‚Üí List‚ÇÄ A

map‚ÇÄ : ‚àÄ {A B} ‚Üí (A ‚Üí B) ‚Üí List‚ÇÄ A ‚Üí List‚ÇÄ B
map‚ÇÄ f []       = []
map‚ÇÄ f (x ‚à∑ xs) = f x ‚à∑ map‚ÇÄ f xs

idList‚ÇÄ : ‚àÄ {A} ‚Üí List‚ÇÄ A ‚Üí List‚ÇÄ A
idList‚ÇÄ []       = []
idList‚ÇÄ (x ‚à∑ xs) = x ‚à∑ idList‚ÇÄ xs

-- The generated type bigger since it is a familly for no reason.
data ‚ü¶List‚ÇÄ‚üß : (‚ü¶Set‚ÇÄ‚üß ‚ü¶‚Üí‚üß ‚ü¶Set‚ÇÅ‚üß) List‚ÇÄ List‚ÇÄ

private
  ‚ü¶List‚ÇÄ‚üß-ctor = Œª c ‚Üí unEl (param-ctor-by-name (extDefEnv [ quote List‚ÇÄ ‚âî quote ‚ü¶List‚ÇÄ‚üß ] (Œµ 2)) c)

data ‚ü¶List‚ÇÄ‚üß where
  ‚ü¶[]‚üß  : unquote (‚ü¶List‚ÇÄ‚üß-ctor (quote List‚ÇÄ.[]))
  _‚ü¶‚à∑‚üß_ : unquote (‚ü¶List‚ÇÄ‚üß-ctor (quote List‚ÇÄ._‚à∑_))

‚ü¶List‚ÇÄ‚üß-env = extConEnv ([ quote List‚ÇÄ.[]  ‚âî quote ‚ü¶List‚ÇÄ‚üß.‚ü¶[]‚üß  ] ‚àò
                      [ quote List‚ÇÄ._‚à∑_ ‚âî quote ‚ü¶List‚ÇÄ‚üß._‚ü¶‚à∑‚üß_ ])
           (extDefEnv [ quote List‚ÇÄ ‚âî quote ‚ü¶List‚ÇÄ‚üß ] (Œµ 2))

-- test = ‚ü¶[]‚üß {{!showType (type (quote List‚ÇÄ.[]))!}} {{!!}} {!!}
-}

{-
‚ü¶idList‚ÇÄ‚üß : unquote (unEl (param-type-by-name ‚ü¶List‚ÇÄ‚üß-env (quote idList‚ÇÄ)))
unquoteDef ‚ü¶idList‚ÇÄ‚üß = param-rec-clauses-by-name ‚ü¶List‚ÇÄ‚üß-env (quote idList‚ÇÄ) (quote ‚ü¶idList‚ÇÄ‚üß)
-}

{-
‚ü¶map‚ÇÄ‚üß : unquote (unEl (param-type-by-name ‚ü¶List‚ÇÄ‚üß-env (quote map‚ÇÄ)))
‚ü¶map‚ÇÄ‚üß {x} {x‚ÇÅ} {x‚ÇÇ} {x‚ÇÉ} {x‚ÇÑ} {x‚ÇÖ} {x‚ÇÜ} {x‚Çá} x‚Çà {[]} {[]} ‚ü¶[]‚üß
  = ‚ü¶[]‚üß
‚ü¶map‚ÇÄ‚üß {x} {x‚ÇÅ} {x‚ÇÇ} {x‚ÇÉ} {x‚ÇÑ} {x‚ÇÖ} {x‚ÇÜ} {x‚Çá} x‚Çà {._ ‚à∑ ._}
  {._ ‚à∑ ._}
  (_‚ü¶‚à∑‚üß_ {x‚ÇÅ‚ÇÉ} {x‚ÇÅ‚ÇÑ} x‚ÇÅ‚ÇÖ {x‚ÇÅ‚ÇÜ} {x‚ÇÅ‚Çá} x‚ÇÅ‚Çà)
  = _‚ü¶‚à∑‚üß_ {x‚ÇÅ‚ÇÄ x‚ÇÅ‚ÇÉ} {x‚ÇÅ‚ÇÅ x‚ÇÅ‚ÇÑ} (x‚ÇÅ‚ÇÇ {x‚ÇÅ‚ÇÉ} {x‚ÇÅ‚ÇÑ} x‚ÇÅ‚ÇÖ)
    {map‚ÇÄ {x‚ÇÑ} {x‚Çá} x‚ÇÅ‚ÇÄ x‚ÇÅ‚ÇÜ} {map‚ÇÄ {x‚ÇÖ} {x‚Çà} x‚ÇÅ‚ÇÅ x‚ÇÅ‚Çá}
    (‚ü¶map‚ÇÄ‚üß {x‚ÇÑ} {x‚ÇÖ} {x‚ÇÜ} {x‚Çá} {x‚Çà} {x‚Çâ} {x‚ÇÅ‚ÇÄ} {x‚ÇÅ‚ÇÅ} x‚ÇÅ‚ÇÇ {x‚ÇÅ‚ÇÜ} {x‚ÇÅ‚Çá}
     x‚ÇÅ‚Çà)
-}

{-
unquoteDef ‚ü¶map‚ÇÄ‚üß = param-rec-clauses-by-name ‚ü¶List‚ÇÄ‚üß-env (quote map‚ÇÄ) (quote ‚ü¶map‚ÇÄ‚üß)
-}


{-
foo : {x0 : Set0} ‚Üí {x1 : Set0} ‚Üí (x2 : (x2 : x0) ‚Üí (x3 : x1) ‚Üí Set0) ‚Üí {x3 : Set0} ‚Üí {x4 : Set0} ‚Üí (x5 : (x5 : x3) ‚Üí (x6 : x4) ‚Üí Set0) ‚Üí {x6 : (x6 : x0) ‚Üí x3} ‚Üí {x7 : (x7 : x1) ‚Üí x4} ‚Üí (x8 : {x8 : x0} ‚Üí {x9 : x1} ‚Üí (x10 : x2 (x8) (x9)) ‚Üí x5 (x6 (x8)) (x7 (x9))) ‚Üí {x9 : Reflection.Param.List‚ÇÄ (x0)} ‚Üí {x10 : Reflection.Param.List‚ÇÄ (x1)} ‚Üí (x11 : Reflection.Param.‚ü¶List‚ÇÄ‚üß {x0} {x1} (x2) (x9) (x10)) ‚Üí Reflection.Param.‚ü¶List‚ÇÄ‚üß {x3} {x4} (x5) (Reflection.Param.map‚ÇÄ {x0} {x3} (x6) (x9)) (Reflection.Param.map‚ÇÄ {x1} {x4} (x7) (x10))
foo {A} {A} (A) {B} {B} (B) {f} {f} (f) {._} {._} (Reflection.Param.‚ü¶List‚ÇÄ‚üß.‚ü¶[]‚üß )  = Reflection.Param.‚ü¶List‚ÇÄ‚üß.‚ü¶[]‚üß
foo {A} {A} (A) {B} {B} (B) {f} {f} (f) {._} {._} (Reflection.Param.‚ü¶List‚ÇÄ‚üß._‚ü¶‚à∑‚üß_ {x} {x} (x) {xs} {xs} (xs) )  = Reflection.Param.‚ü¶List‚ÇÄ‚üß._‚ü¶‚à∑‚üß_ {x0 (x0)} {x0 (x0)} (x0 {x0} {x0} (x0)) {Reflection.Param.map‚ÇÄ {x0} {x0} (x0) (x0)} {Reflection.Param.map‚ÇÄ {x0} {x0} (x0) (x0)} (Reflection.Param.test' {x0} {x0} (x0) {x0} {x0} (x0) {x0} {x0} (x0) {x0} {x0} (x0))
-}

-- test' = {! showFunDef "foo" (param-rec-def-by-name ‚ü¶List‚ÇÄ‚üß-env (quote map‚ÇÄ) (quote test'))!}

open import Function.Param.Unary

revealed-[‚Üí] = Reveal-args.n√•me (quote _[‚ÇÄ‚Üí‚ÇÄ]_)

revealed-[‚Üí]' : ‚àÄ (A : Set‚ÇÄ) (A‚Çö : A ‚Üí Set‚ÇÄ)
                  (B : Set‚ÇÄ) (B‚Çö : B ‚Üí Set‚ÇÄ)
                  (f : A ‚Üí B) ‚Üí Set‚ÇÄ
unquoteDef revealed-[‚Üí]' = revealed-[‚Üí] >>= defineFun revealed-[‚Üí]' ‚àò Get-clauses.from-def

revelator-[‚Üí] : ({A : Set} (A‚Çö : A ‚Üí Set) {B : Set} (B‚Çö : B ‚Üí Set) (f : A ‚Üí B) ‚Üí Set)
              ‚Üí  (A : Set) (A‚Çö : A ‚Üí Set) (B : Set) (B‚Çö : B ‚Üí Set) (f : A ‚Üí B) ‚Üí Set
unquoteDef revelator-[‚Üí] = revelator-by-name (quote _[‚ÇÄ‚Üí‚ÇÄ]_) revelator-[‚Üí]

p-[‚Üí]-Type : Set‚ÇÅ
p-[‚Üí]-Type = unquoteTerm (param-type-by-name (Œµ 1) (quote _[‚ÇÄ‚Üí‚ÇÄ]_))

p-[‚Üí]-Type' = ‚àÄ {A : Set‚ÇÄ}       (A‚ÇÄ‚Çö : A ‚Üí Set‚ÇÄ)
                {A‚Çö : A ‚Üí Set‚ÇÄ}  (A‚ÇÅ‚Çö : {x : A} ‚Üí A‚ÇÄ‚Çö x ‚Üí A‚Çö x ‚Üí Set‚ÇÄ)
                {B : Set‚ÇÄ}       (B‚ÇÄ‚Çö : B ‚Üí Set‚ÇÄ)
                {B‚Çö : B ‚Üí Set‚ÇÄ}  (B‚ÇÅ‚Çö : {x : B} ‚Üí B‚ÇÄ‚Çö x ‚Üí B‚Çö x ‚Üí Set‚ÇÄ)
                {f : A ‚Üí B}      (f‚Çö : {x : A} ‚Üí A‚ÇÄ‚Çö x ‚Üí B‚ÇÄ‚Çö (f x))
              ‚Üí (A‚Çö [‚ÇÄ‚Üí‚ÇÄ] B‚Çö) f
              ‚Üí Set

p-[‚Üí]'-test : p-[‚Üí]-Type' ‚â° p-[‚Üí]-Type
p-[‚Üí]'-test = refl

[[‚Üí]] : p-[‚Üí]-Type
unquoteDef [[‚Üí]] = param-def-by-name (Œµ 1) (quote _[‚ÇÄ‚Üí‚ÇÄ]_) [[‚Üí]]

data [[‚Ñï]] : [[Set‚ÇÄ]] [‚Ñï] [‚Ñï] where
  [[zero]] : [[‚Ñï]] [zero] [zero]
  [[suc]]  : [[‚Üí]] [‚Ñï] [[‚Ñï]] [‚Ñï] [[‚Ñï]] [suc] [suc]

_/2 : ‚Ñï ‚Üí ‚Ñï
zero        /2 = zero
suc zero    /2 = zero
suc (suc n) /2 = suc (n /2)

_‚ü¶/2‚üß : (‚ü¶‚Ñï‚üß ‚ü¶‚ÇÄ‚Üí‚ÇÄ‚üß ‚ü¶‚Ñï‚üß) _/2 _/2
‚ü¶zero‚üß          ‚ü¶/2‚üß = ‚ü¶zero‚üß
‚ü¶suc‚üß ‚ü¶zero‚üß    ‚ü¶/2‚üß = ‚ü¶zero‚üß
‚ü¶suc‚üß (‚ü¶suc‚üß n) ‚ü¶/2‚üß = ‚ü¶suc‚üß (n ‚ü¶/2‚üß)

_+‚Ñï_ : ‚Ñï ‚Üí ‚Ñï ‚Üí ‚Ñï
zero  +‚Ñï n = n
suc m +‚Ñï n = suc (m +‚Ñï n)

id' : {n : ‚Ñï} ‚Üí ‚Ñï ‚Üí ‚Ñï
id' = Œª n ‚Üí n

‚ü¶id'‚üß : (‚àÄ‚ü® n ‚à∂ ‚ü¶‚Ñï‚üß ‚ü©‚ü¶‚Üí‚üß ‚ü¶‚Ñï‚üß ‚ü¶‚Üí‚üß ‚ü¶‚Ñï‚üß) (Œª {n} ‚Üí id' {n}) (Œª {n} ‚Üí id' {n})
unquoteDef ‚ü¶id'‚üß = param-def-by-name defEnv2 (quote id') ‚ü¶id'‚üß

{-
-- u = {!unquoteTerm (typeError (termErr (quoteTerm ‚ü¶id'‚üß) ‚à∑ []))!}

pred' : ‚Ñï ‚Üí ‚Ñï
pred' = Œª { zero    ‚Üí zero
          ; (suc m) ‚Üí m }

‚ü¶pred'‚üß-ref : Wrapper ((‚ü¶‚Ñï‚üß ‚ü¶‚Üí‚üß ‚ü¶‚Ñï‚üß) pred' pred')
‚ü¶pred'‚üß-ref  = wrap (Œª { {_} {_} ‚ü¶zero‚üß    ‚Üí ‚ü¶zero‚üß ; {_} {_} (‚ü¶suc‚üß m) ‚Üí m })


-- unquoteDecl ‚ü¶pred'‚üß = param-decl-by-name defEnv2 (quote pred') ‚ü¶pred'‚üß

‚ü¶pred'‚üß : (‚ü¶‚Ñï‚üß ‚ü¶‚Üí‚üß ‚ü¶‚Ñï‚üß) pred' pred'
unquoteDef ‚ü¶pred'‚üß = param-def-by-name-dbg defEnv2 (quote pred') ‚ü¶pred'‚üß
-- ‚ü¶pred'‚üß {x} {y} = (unquoteTerm (param-term-by-name defEnv2 (quote pred'))) {x} {y}
-- ‚ü¶pred'‚üß {x} {y} = unwrap ‚ü¶pred'‚üß-ref {x} {y}

{-
_‚ü¶+‚Ñï‚üß_ : (‚ü¶‚Ñï‚üß ‚ü¶‚ÇÄ‚Üí‚ÇÄ‚üß ‚ü¶‚Ñï‚üß ‚ü¶‚ÇÄ‚Üí‚ÇÄ‚üß ‚ü¶‚Ñï‚üß) _+‚Ñï_ _+‚Ñï_
‚ü¶zero‚üß  ‚ü¶+‚Ñï‚üß n = n
‚ü¶suc‚üß m ‚ü¶+‚Ñï‚üß n = ‚ü¶suc‚üß (m ‚ü¶+‚Ñï‚üß n)

‚ü¶‚ü¶Set‚ÇÄ‚üß‚üß : (‚ü¶Set‚ÇÄ‚üß ‚ü¶‚ÇÅ‚Üí‚ÇÇ‚üß ‚ü¶Set‚ÇÄ‚üß ‚ü¶‚ÇÅ‚Üí‚ÇÇ‚üß ‚ü¶Set‚ÇÅ‚üß) ‚ü¶Set‚ÇÄ‚üß ‚ü¶Set‚ÇÄ‚üß
‚ü¶‚ü¶Set‚ÇÄ‚üß‚üß = Œª A‚ÇÄ A‚ÇÅ ‚Üí A‚ÇÄ ‚ü¶‚ÇÄ‚Üí‚ÇÅ‚üß A‚ÇÅ ‚ü¶‚ÇÄ‚Üí‚ÇÅ‚üß ‚ü¶Set‚ÇÄ‚üß

‚ü¶‚ü¶Set‚ÇÄ‚üß‚üß' : {x‚ÇÅ x‚ÇÇ : Set} (x·µ£ : x‚ÇÅ ‚Üí x‚ÇÇ ‚Üí Set) {x‚ÇÉ : Set} {x‚ÇÑ : Set}
            (x·µ£‚ÇÅ : x‚ÇÉ ‚Üí x‚ÇÑ ‚Üí Set) ‚Üí
            (x‚ÇÅ ‚Üí x‚ÇÉ ‚Üí Set) ‚Üí (x‚ÇÇ ‚Üí x‚ÇÑ ‚Üí Set) ‚Üí Set‚ÇÅ
‚ü¶‚ü¶Set‚ÇÄ‚üß‚üß' = Œª A‚ÇÄ A‚ÇÅ f‚ÇÅ f‚ÇÇ ‚Üí
  ‚àÄ {x‚ÇÅ} {x‚ÇÇ} (x·µ£ : A‚ÇÄ x‚ÇÅ x‚ÇÇ)
    {x‚ÇÉ} {x‚ÇÑ} (x·µ£‚ÇÅ : A‚ÇÅ x‚ÇÉ x‚ÇÑ) ‚Üí
    f‚ÇÅ x‚ÇÅ x‚ÇÉ ‚Üí f‚ÇÇ x‚ÇÇ x‚ÇÑ ‚Üí Set

-- Since quoteTerm normalises
test-‚ü¶‚ü¶Set‚ÇÄ‚üß‚üß : quoteTerm ‚ü¶‚ü¶Set‚ÇÄ‚üß‚üß ‚â°-no-hints quoteTerm ‚ü¶‚ü¶Set‚ÇÄ‚üß‚üß'
test-‚ü¶‚ü¶Set‚ÇÄ‚üß‚üß = refl

{-
‚ü¶‚ü¶Set‚ÇÄ‚üß‚üß-type = unquote (type (quote ‚ü¶‚ü¶Set‚ÇÄ‚üß‚üß))
test-‚ü¶‚ü¶Set‚ÇÄ‚üß‚üß-type : ‚ü¶‚ü¶Set‚ÇÄ‚üß‚üß-type ‚â° unquote (unEl (type (quote ‚ü¶‚ü¶Set‚ÇÄ‚üß‚üß')))
test-‚ü¶‚ü¶Set‚ÇÄ‚üß‚üß-type = refl

pSet‚ÇÄ = pTerm defEnv2 `‚òÖ‚ÇÄ
ppSet‚ÇÄ = pTerm defEnv2 pSet‚ÇÄ
p‚ü¶Set‚ÇÄ‚üß = param-clauses-by-name defEnv2 (quote ‚ü¶Set‚ÇÄ‚üß)
test-pSet‚ÇÄ : pSet‚ÇÄ ‚â°-no-hints quoteTerm ‚ü¶Set‚ÇÄ‚üß
test-pSet‚ÇÄ = refl
test-ppSet‚ÇÄ : ppSet‚ÇÄ ‚â°-no-hints quoteTerm ‚ü¶‚ü¶Set‚ÇÄ‚üß‚üß
test-ppSet‚ÇÄ = refl
test-ppSet‚ÇÄ'' : ppSet‚ÇÄ ‚â°-no-hints Get-term.from-clauses p‚ü¶Set‚ÇÄ‚üß
test-ppSet‚ÇÄ'' = refl

‚ü¶‚ü¶Set‚ÇÄ‚üß‚üß'' : (‚ü¶Set‚ÇÄ‚üß ‚ü¶‚ÇÅ‚Üí‚ÇÇ‚üß ‚ü¶Set‚ÇÄ‚üß ‚ü¶‚ÇÅ‚Üí‚ÇÇ‚üß ‚ü¶Set‚ÇÅ‚üß) ‚ü¶Set‚ÇÄ‚üß ‚ü¶Set‚ÇÄ‚üß
unquoteDef ‚ü¶‚ü¶Set‚ÇÄ‚üß‚üß'' = p‚ü¶Set‚ÇÄ‚üß

test-‚ü¶‚ü¶Set‚ÇÄ‚üß‚üß'' : _‚â°_ {A = ‚ü¶‚ü¶Set‚ÇÄ‚üß‚üß-type} ‚ü¶‚ü¶Set‚ÇÄ‚üß‚üß'' ‚ü¶‚ü¶Set‚ÇÄ‚üß‚üß
test-‚ü¶‚ü¶Set‚ÇÄ‚üß‚üß'' = refl

test-p0-‚ü¶Set‚ÇÄ‚üß : pTerm defEnv0 (quoteTerm ‚ü¶Set‚ÇÄ‚üß) ‚â°-no-hints quoteTerm ‚ü¶Set‚ÇÄ‚üß
test-p0-‚ü¶Set‚ÇÄ‚üß = refl

data ‚ü¶‚ü¶ùüö‚üß‚üß : (‚ü¶‚ü¶Set‚ÇÄ‚üß‚üß ‚ü¶ùüö‚üß ‚ü¶ùüö‚üß) ‚ü¶ùüö‚üß ‚ü¶ùüö‚üß where
  ‚ü¶‚ü¶0‚ÇÇ‚üß‚üß : ‚ü¶‚ü¶ùüö‚üß‚üß ‚ü¶0‚ÇÇ‚üß ‚ü¶0‚ÇÇ‚üß ‚ü¶0‚ÇÇ‚üß ‚ü¶0‚ÇÇ‚üß
  ‚ü¶‚ü¶1‚ÇÇ‚üß‚üß : ‚ü¶‚ü¶ùüö‚üß‚üß ‚ü¶1‚ÇÇ‚üß ‚ü¶1‚ÇÇ‚üß ‚ü¶1‚ÇÇ‚üß ‚ü¶1‚ÇÇ‚üß

p1‚Ñï‚Üí‚Ñï = pTerm defEnv1 (quoteTerm (‚Ñï ‚Üí ‚Ñï))
[‚Ñï‚Üí‚Ñï] = [‚Ñï] [‚Üí] [‚Ñï]
test-p1‚Ñï‚Üí‚Ñï : unquote p1‚Ñï‚Üí‚Ñï ‚â° [‚Ñï‚Üí‚Ñï]
test-p1‚Ñï‚Üí‚Ñï = refl

p2‚Ñï‚Üí‚Ñï = pTerm defEnv2 (quoteTerm (‚Ñï ‚Üí ‚Ñï))
‚ü¶‚Ñï‚Üí‚Ñï‚üß = ‚ü¶‚Ñï‚üß ‚ü¶‚Üí‚üß ‚ü¶‚Ñï‚üß
test-p2‚Ñï‚Üí‚Ñï : unquote p2‚Ñï‚Üí‚Ñï ‚â° ‚ü¶‚Ñï‚Üí‚Ñï‚üß
test-p2‚Ñï‚Üí‚Ñï = refl

p‚Ñï‚Üí‚Ñï‚Üí‚Ñï = pTerm defEnv2 (quoteTerm (‚Ñï ‚Üí ‚Ñï ‚Üí ‚Ñï))
‚ü¶‚Ñï‚Üí‚Ñï‚Üí‚Ñï‚üß = ‚ü¶‚Ñï‚üß ‚ü¶‚Üí‚üß ‚ü¶‚Ñï‚üß ‚ü¶‚Üí‚üß ‚ü¶‚Ñï‚üß
test-p‚Ñï‚Üí‚Ñï‚Üí‚Ñï : p‚Ñï‚Üí‚Ñï‚Üí‚Ñï ‚â°-no-hints quoteTerm ‚ü¶‚Ñï‚Üí‚Ñï‚Üí‚Ñï‚üß
test-p‚Ñï‚Üí‚Ñï‚Üí‚Ñï = refl
ZERO : Set‚ÇÅ
ZERO = (A : Set‚ÇÄ) ‚Üí A
‚ü¶ZERO‚üß : ZERO ‚Üí ZERO ‚Üí Set‚ÇÅ
‚ü¶ZERO‚üß f‚ÇÄ f‚ÇÅ =
  {A‚ÇÄ A‚ÇÅ : Set‚ÇÄ} (A·µ£ : A‚ÇÄ ‚Üí A‚ÇÅ ‚Üí Set‚ÇÄ)
  ‚Üí A·µ£ (f‚ÇÄ A‚ÇÄ) (f‚ÇÅ A‚ÇÅ)
pZERO = pTerm (Œµ 2) (quoteTerm ZERO)
q‚ü¶ZERO‚üß = quoteTerm ‚ü¶ZERO‚üß
test-pZERO : pZERO ‚â°-no-hints q‚ü¶ZERO‚üß
test-pZERO = refl
ID : Set‚ÇÅ
ID = (A : Set‚ÇÄ) ‚Üí A ‚Üí A
‚ü¶ID‚üß : ID ‚Üí ID ‚Üí Set‚ÇÅ
‚ü¶ID‚üß f‚ÇÄ f‚ÇÅ =
  {A‚ÇÄ A‚ÇÅ : Set‚ÇÄ} (A·µ£ : A‚ÇÄ ‚Üí A‚ÇÅ ‚Üí Set‚ÇÄ)
  {x‚ÇÄ : A‚ÇÄ} {x‚ÇÅ : A‚ÇÅ} (x : A·µ£ x‚ÇÄ x‚ÇÅ)
  ‚Üí A·µ£ (f‚ÇÄ A‚ÇÄ x‚ÇÄ) (f‚ÇÅ A‚ÇÅ x‚ÇÅ)
pID = pTerm (Œµ 2) (quoteTerm ID)
q‚ü¶ID‚üß = quoteTerm ‚ü¶ID‚üß
test-ID : q‚ü¶ID‚üß ‚â°-no-hints pID
test-ID = refl

‚ü¶not‚üß' : (‚ü¶ùüö‚üß ‚ü¶‚Üí‚üß ‚ü¶ùüö‚üß) not not
unquoteDef ‚ü¶not‚üß' = param-clauses-by-name defEnv2 (quote not)
test-not : ‚àÄ {x‚ÇÄ x‚ÇÅ : ùüö} (x·µ£ : ‚ü¶ùüö‚üß x‚ÇÄ x‚ÇÅ) ‚Üí ‚ü¶not‚üß x·µ£ ‚â° ‚ü¶not‚üß' x·µ£
test-not ‚ü¶0‚ÇÇ‚üß = refl
test-not ‚ü¶1‚ÇÇ‚üß = refl

[pred]' : ([‚Ñï] [‚Üí] [‚Ñï]) pred
unquoteDef [pred]' = param-clauses-by-name defEnv1 (quote pred)

test-p1-pred : ‚àÄ {n} (n‚Çö : [‚Ñï] n) ‚Üí [pred]' n‚Çö ‚â° [pred] n‚Çö
test-p1-pred [zero]     = refl
test-p1-pred ([suc] n‚Çö) = refl

‚ü¶pred‚üß' : (‚ü¶‚Ñï‚üß ‚ü¶‚Üí‚üß ‚ü¶‚Ñï‚üß) pred pred
unquoteDef ‚ü¶pred‚üß' = param-clauses-by-name defEnv2 (quote pred)

test-p2-pred : ‚àÄ {n‚ÇÄ n‚ÇÅ} (n·µ£ : ‚ü¶‚Ñï‚üß n‚ÇÄ n‚ÇÅ) ‚Üí ‚ü¶pred‚üß' n·µ£ ‚â° ‚ü¶pred‚üß n·µ£
test-p2-pred ‚ü¶zero‚üß     = refl
test-p2-pred (‚ü¶suc‚üß n·µ£) = refl

p/2 = param-rec-def-by-name defEnv2 (quote _/2)
q‚ü¶/2‚üß = definition (quote _‚ü¶/2‚üß)
unquoteDecl _‚ü¶/2‚üß' = p/2 _‚ü¶/2‚üß'
test-/2 : function (p/2 (quote _‚ü¶/2‚üß)) ‚â°-def-no-hints q‚ü¶/2‚üß
test-/2 = refl
test-/2' : ‚àÄ {n‚ÇÄ n‚ÇÅ} (n·µ£ : ‚ü¶‚Ñï‚üß n‚ÇÄ n‚ÇÅ) ‚Üí n·µ£ ‚ü¶/2‚üß' ‚â° n·µ£ ‚ü¶/2‚üß
test-/2' ‚ü¶zero‚üß = refl
test-/2' (‚ü¶suc‚üß ‚ü¶zero‚üß) = refl
test-/2' (‚ü¶suc‚üß (‚ü¶suc‚üß n·µ£)) rewrite test-/2' n·µ£ = refl

p+ = param-rec-def-by-name defEnv2 (quote _+‚Ñï_)
q‚ü¶+‚üß = definition (quote _‚ü¶+‚Ñï‚üß_)
unquoteDecl _‚ü¶+‚üß'_ = p+ _‚ü¶+‚üß'_
test-+ : function (p+ (quote _‚ü¶+‚Ñï‚üß_)) ‚â°-def-no-hints q‚ü¶+‚üß
test-+ = refl
test-+' : ‚àÄ {n‚ÇÄ n‚ÇÅ} (n·µ£ : ‚ü¶‚Ñï‚üß n‚ÇÄ n‚ÇÅ) {n'‚ÇÄ n'‚ÇÅ} (n'·µ£ : ‚ü¶‚Ñï‚üß n'‚ÇÄ n'‚ÇÅ) ‚Üí n·µ£ ‚ü¶+‚üß' n'·µ£ ‚â° n·µ£ ‚ü¶+‚Ñï‚üß n'·µ£
test-+' ‚ü¶zero‚üß    n'·µ£ = refl
test-+' (‚ü¶suc‚üß n·µ£) n'·µ£ rewrite test-+' n·µ£ n'·µ£ = refl

{-
is-good : String ‚Üí ùüö
is-good "good" = 1‚ÇÇ
is-good _      = 0‚ÇÇ

‚ü¶is-good‚üß : (‚ü¶String‚üß ‚ü¶‚ÇÄ‚Üí‚ÇÄ‚üß ‚ü¶ùüö‚üß) is-good is-good
‚ü¶is-good‚üß {"good"} refl = ‚ü¶1‚ÇÇ‚üß
‚ü¶is-good‚üß {_}      refl = {!!}

my-good = unquote (lit (string "good"))
my-good-test : my-good ‚â° "good"
my-good-test = refl
-}

{-
‚ü¶is-good‚üß' : (‚ü¶String‚üß ‚ü¶‚ÇÄ‚Üí‚ÇÄ‚üß ‚ü¶ùüö‚üß) is-good is-good
unquoteDef ‚ü¶is-good‚üß' = param-clauses-by-name defEnv2 (quote is-good)
test-is-good = {!!}
-}
-- -}
-- -}
-- -}
-- -}
-- -}
-- -}
-- -}
-- -}
-- -}
